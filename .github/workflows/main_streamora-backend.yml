name: Deploy Backend to Azure

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'server/**'
      - '.github/workflows/main_streamora-backend.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'server/**'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npx jest --passWithNoTests
        env:
          NODE_ENV: test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm ci --only=production

      - name: Create production build
        run: |
          mkdir -p ./dist
          cp -r ./models ./dist/
          cp -r ./routes ./dist/
          cp -r ./middleware ./dist/
          cp -r ./services ./dist/
          cp ./server.js ./dist/
          cp ./package.json ./dist/
          cp ./package-lock.json ./dist/
          cd ./dist
          npm ci --only=production

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_BACKEND_APP_NAME }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_BACKEND_PUBLISH_PROFILE }}
          package: './server/dist'

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "✅ Backend deployment successful!"
          else
            echo "❌ Backend deployment failed!"
            exit 1
          fi